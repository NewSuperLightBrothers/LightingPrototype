//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/MobileControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MobileControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MobileControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MobileControls"",
    ""maps"": [
        {
            ""name"": ""Locomotion"",
            ""id"": ""c523fbec-0703-4fcc-8daa-c444079b7047"",
            ""actions"": [
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""ff5cf1b3-2477-44ae-aa21-55bd55e7f1c1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GyroAngularVelocity"",
                    ""type"": ""Value"",
                    ""id"": ""4fae3878-710b-4b8f-8bf3-76b06d6fe95f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1cb6b08b-fb2a-483b-87f4-a031929d05b2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09005027-0314-4535-b8da-ced3665474bf"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GyroAngularVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interaction"",
            ""id"": ""31d9f56b-8828-4530-a1c8-b5547147da40"",
            ""actions"": [
                {
                    ""name"": ""ButtonEast"",
                    ""type"": ""Button"",
                    ""id"": ""b49aabcc-6229-4cd1-aa77-55d73fcf32d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ButtonWest"",
                    ""type"": ""Button"",
                    ""id"": ""9ab946fc-bcf1-422e-b77e-360ff828f97d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ButtonNorth"",
                    ""type"": ""Button"",
                    ""id"": ""f8b76d37-f6aa-4d40-acae-26531c2a2d0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ButtonSouth"",
                    ""type"": ""Button"",
                    ""id"": ""a2fc4f5b-8e96-448a-b526-86967be14ca8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""be0a3a2e-6d4d-4fe0-b6c2-becf16c572e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""1582c414-b25f-4fdf-ba84-f149e2244fda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touchscreen"",
                    ""type"": ""Value"",
                    ""id"": ""a2a04255-4d40-4d55-ace6-32262f91cf49"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8fe488c1-8df1-401e-8186-455f58de3a1d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonEast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ffcf376-31d9-4683-bf69-65055156a7d3"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonWest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8456fb4-bd44-45a6-adb2-6f5689841d66"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonNorth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e45e55e7-79b8-4729-b40c-6fddadba4534"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonSouth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""380847cb-e4fe-4481-b3d2-37aa5e3acbb6"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b54bba1-96ad-4f77-8cbc-da37bbaf35e6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""598ffeed-ff14-4c1c-9cd2-ec95a1838d3b"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touchscreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Locomotion
        m_Locomotion = asset.FindActionMap("Locomotion", throwIfNotFound: true);
        m_Locomotion_Joystick = m_Locomotion.FindAction("Joystick", throwIfNotFound: true);
        m_Locomotion_GyroAngularVelocity = m_Locomotion.FindAction("GyroAngularVelocity", throwIfNotFound: true);
        // Interaction
        m_Interaction = asset.FindActionMap("Interaction", throwIfNotFound: true);
        m_Interaction_ButtonEast = m_Interaction.FindAction("ButtonEast", throwIfNotFound: true);
        m_Interaction_ButtonWest = m_Interaction.FindAction("ButtonWest", throwIfNotFound: true);
        m_Interaction_ButtonNorth = m_Interaction.FindAction("ButtonNorth", throwIfNotFound: true);
        m_Interaction_ButtonSouth = m_Interaction.FindAction("ButtonSouth", throwIfNotFound: true);
        m_Interaction_LeftTrigger = m_Interaction.FindAction("LeftTrigger", throwIfNotFound: true);
        m_Interaction_RightTrigger = m_Interaction.FindAction("RightTrigger", throwIfNotFound: true);
        m_Interaction_Touchscreen = m_Interaction.FindAction("Touchscreen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Locomotion
    private readonly InputActionMap m_Locomotion;
    private List<ILocomotionActions> m_LocomotionActionsCallbackInterfaces = new List<ILocomotionActions>();
    private readonly InputAction m_Locomotion_Joystick;
    private readonly InputAction m_Locomotion_GyroAngularVelocity;
    public struct LocomotionActions
    {
        private @MobileControls m_Wrapper;
        public LocomotionActions(@MobileControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joystick => m_Wrapper.m_Locomotion_Joystick;
        public InputAction @GyroAngularVelocity => m_Wrapper.m_Locomotion_GyroAngularVelocity;
        public InputActionMap Get() { return m_Wrapper.m_Locomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocomotionActions set) { return set.Get(); }
        public void AddCallbacks(ILocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_LocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Add(instance);
            @Joystick.started += instance.OnJoystick;
            @Joystick.performed += instance.OnJoystick;
            @Joystick.canceled += instance.OnJoystick;
            @GyroAngularVelocity.started += instance.OnGyroAngularVelocity;
            @GyroAngularVelocity.performed += instance.OnGyroAngularVelocity;
            @GyroAngularVelocity.canceled += instance.OnGyroAngularVelocity;
        }

        private void UnregisterCallbacks(ILocomotionActions instance)
        {
            @Joystick.started -= instance.OnJoystick;
            @Joystick.performed -= instance.OnJoystick;
            @Joystick.canceled -= instance.OnJoystick;
            @GyroAngularVelocity.started -= instance.OnGyroAngularVelocity;
            @GyroAngularVelocity.performed -= instance.OnGyroAngularVelocity;
            @GyroAngularVelocity.canceled -= instance.OnGyroAngularVelocity;
        }

        public void RemoveCallbacks(ILocomotionActions instance)
        {
            if (m_Wrapper.m_LocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_LocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LocomotionActions @Locomotion => new LocomotionActions(this);

    // Interaction
    private readonly InputActionMap m_Interaction;
    private List<IInteractionActions> m_InteractionActionsCallbackInterfaces = new List<IInteractionActions>();
    private readonly InputAction m_Interaction_ButtonEast;
    private readonly InputAction m_Interaction_ButtonWest;
    private readonly InputAction m_Interaction_ButtonNorth;
    private readonly InputAction m_Interaction_ButtonSouth;
    private readonly InputAction m_Interaction_LeftTrigger;
    private readonly InputAction m_Interaction_RightTrigger;
    private readonly InputAction m_Interaction_Touchscreen;
    public struct InteractionActions
    {
        private @MobileControls m_Wrapper;
        public InteractionActions(@MobileControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ButtonEast => m_Wrapper.m_Interaction_ButtonEast;
        public InputAction @ButtonWest => m_Wrapper.m_Interaction_ButtonWest;
        public InputAction @ButtonNorth => m_Wrapper.m_Interaction_ButtonNorth;
        public InputAction @ButtonSouth => m_Wrapper.m_Interaction_ButtonSouth;
        public InputAction @LeftTrigger => m_Wrapper.m_Interaction_LeftTrigger;
        public InputAction @RightTrigger => m_Wrapper.m_Interaction_RightTrigger;
        public InputAction @Touchscreen => m_Wrapper.m_Interaction_Touchscreen;
        public InputActionMap Get() { return m_Wrapper.m_Interaction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Add(instance);
            @ButtonEast.started += instance.OnButtonEast;
            @ButtonEast.performed += instance.OnButtonEast;
            @ButtonEast.canceled += instance.OnButtonEast;
            @ButtonWest.started += instance.OnButtonWest;
            @ButtonWest.performed += instance.OnButtonWest;
            @ButtonWest.canceled += instance.OnButtonWest;
            @ButtonNorth.started += instance.OnButtonNorth;
            @ButtonNorth.performed += instance.OnButtonNorth;
            @ButtonNorth.canceled += instance.OnButtonNorth;
            @ButtonSouth.started += instance.OnButtonSouth;
            @ButtonSouth.performed += instance.OnButtonSouth;
            @ButtonSouth.canceled += instance.OnButtonSouth;
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @Touchscreen.started += instance.OnTouchscreen;
            @Touchscreen.performed += instance.OnTouchscreen;
            @Touchscreen.canceled += instance.OnTouchscreen;
        }

        private void UnregisterCallbacks(IInteractionActions instance)
        {
            @ButtonEast.started -= instance.OnButtonEast;
            @ButtonEast.performed -= instance.OnButtonEast;
            @ButtonEast.canceled -= instance.OnButtonEast;
            @ButtonWest.started -= instance.OnButtonWest;
            @ButtonWest.performed -= instance.OnButtonWest;
            @ButtonWest.canceled -= instance.OnButtonWest;
            @ButtonNorth.started -= instance.OnButtonNorth;
            @ButtonNorth.performed -= instance.OnButtonNorth;
            @ButtonNorth.canceled -= instance.OnButtonNorth;
            @ButtonSouth.started -= instance.OnButtonSouth;
            @ButtonSouth.performed -= instance.OnButtonSouth;
            @ButtonSouth.canceled -= instance.OnButtonSouth;
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @Touchscreen.started -= instance.OnTouchscreen;
            @Touchscreen.performed -= instance.OnTouchscreen;
            @Touchscreen.canceled -= instance.OnTouchscreen;
        }

        public void RemoveCallbacks(IInteractionActions instance)
        {
            if (m_Wrapper.m_InteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionActions @Interaction => new InteractionActions(this);
    public interface ILocomotionActions
    {
        void OnJoystick(InputAction.CallbackContext context);
        void OnGyroAngularVelocity(InputAction.CallbackContext context);
    }
    public interface IInteractionActions
    {
        void OnButtonEast(InputAction.CallbackContext context);
        void OnButtonWest(InputAction.CallbackContext context);
        void OnButtonNorth(InputAction.CallbackContext context);
        void OnButtonSouth(InputAction.CallbackContext context);
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnTouchscreen(InputAction.CallbackContext context);
    }
}
